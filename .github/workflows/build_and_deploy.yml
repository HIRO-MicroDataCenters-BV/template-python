name: deploy

on: [push, pull_request, release]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        run: pip install poetry

      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-root --with dev,test

      - name: Run style checks
        run: |
          poetry run mypy app
          poetry run isort app --check --diff
          poetry run flake8 app
          poetry run black app --check --diff

      - name: Run tests
        run: poetry run pytest

  release:
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Make versions
        run: |
          chmod +x ./tools/version.sh
          source ./tools/version.sh; make_version
          source ./tools/version.sh; set_version_in_pyproject
          source ./tools/version.sh; set_version_in_chart "app" "${{ vars.DOCKER_IMAGE_NAME }}"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  build:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Make versions
        run: |
          chmod +x ./tools/version.sh
          source ./tools/version.sh; make_version
          TAGS=$(source ./tools/version.sh; get_docker_image_tags "${{ vars.DOCKER_IMAGE_NAME }}")
          echo "DOCKER_IMAGE_TAGS=$TAGS" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.DOCKER_IMAGE_TAGS }}

  deploy:
    runs-on: ubuntu-latest
    needs: [test, release, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy to Kubernetes Cluster
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
          HELM_REPO_URL: ${{ vars.HELM_REPO_URL }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBE_CONFIG" | base64 --decode > $HOME/.kube/config
          helm repo add defrepo $HELM_REPO_URL
          helm upgrade --install my-app defrepo/app
